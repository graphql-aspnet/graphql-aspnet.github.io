"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2286],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>h});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),u=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=u(e.components);return a.createElement(s.Provider,{value:r},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=n,h=p["".concat(s,".").concat(d)]||p[d]||y[d]||o;return t?a.createElement(h,i(i({ref:r},c),{},{components:t})):a.createElement(h,i({ref:r},c))}));function h(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3134:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(8168),n=(t(6540),t(5680));const o={id:"vocabulary",title:"Vocabulary",sidebar_label:"Vocabulary",sidebar_position:11},i=void 0,l={unversionedId:"reference/vocabulary",id:"reference/vocabulary",title:"Vocabulary",description:"Fields & Resolvers",source:"@site/docs/reference/vocabulary.md",sourceDirName:"reference",slug:"/reference/vocabulary",permalink:"/docs/reference/vocabulary",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{id:"vocabulary",title:"Vocabulary",sidebar_label:"Vocabulary",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Benchmarks",permalink:"/docs/reference/performance"}},s={},u=[{value:"Fields &amp; Resolvers",id:"fields--resolvers",level:3},{value:"Graph Type",id:"graph-type",level:3},{value:"Query Document",id:"query-document",level:3},{value:"Root Graph Types",id:"root-graph-types",level:3},{value:"Schema",id:"schema",level:3}],c={toc:u};function p(e){let{components:r,...t}=e;return(0,n.yg)("wrapper",(0,a.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h3",{id:"fields--resolvers"},"Fields & Resolvers"),(0,n.yg)("p",null,"In GraphQL terms, a field is any requested piece of data (such as an id or  name).  A resolver fulfills the request for data from a schema field. It takes in a set of input arguments and produces a piece of data that is returned to the client. In GraphQL ASP.NET your controller methods act as resolvers for top level fields in any query."),(0,n.yg)("h3",{id:"graph-type"},"Graph Type"),(0,n.yg)("p",null,"A graph type is an entity on your object graph; a droid, a donut, a string, a number etc.  In GraphQL ASP.NET your model classes, interfaces, enums, controllers etc. are compiled into the various graph types required by the runtime."),(0,n.yg)("h3",{id:"query-document"},"Query Document"),(0,n.yg)("p",null,"This is the raw query text submitted by a client. When GraphQL accepts a query it is converted from a string to an internal document format that is parsed and used to fulfill the request.  "),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"Queries, Mutations and Subscriptions are all types of query documents.")),(0,n.yg)("h3",{id:"root-graph-types"},"Root Graph Types"),(0,n.yg)("p",null,'There are three root graph types in GraphQL: Query, Mutation, Subscription. Whenever you make a graphql request, you always specify which query root you are targeting. This documentation will usually refer to all operations as "queries" but this includes mutations and subscriptions as well.'),(0,n.yg)("h3",{id:"schema"},"Schema"),(0,n.yg)("p",null,"This is the set of public data types, their fields, input arguments etc. that are exposed on an object graph. When you write a graphql query to return data, the fields you request must all be defined on a schema that graphql will validate your query against.  "),(0,n.yg)("p",null,'Your schema is "generated" at runtime by analyzing your model classes, controllers and action methods then populating a ',(0,n.yg)("inlineCode",{parentName:"p"},"GraphSchema")," container with the appropriate graph types to map graphql requests to your controllers. "),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"}," In GraphQL ASP.NET the schema is generated at runtime directly from your C# controllers and POCOs; there is no additional boilerplate code necessary to define a schema.")))}p.isMDXComponent=!0}}]);