"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8581],{5610:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting Started","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Overview","href":"/docs/quick/overview","docId":"quick/overview"},{"type":"link","label":"Your First App","href":"/docs/quick/create-app","docId":"quick/create-app"},{"type":"link","label":"Code Examples","href":"/docs/quick/code-examples","docId":"quick/code-examples"}]},{"type":"category","label":"Introduction","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"What is GraphQL?","href":"/docs/introduction/what-is-graphql","docId":"introduction/what-is-graphql"},{"type":"link","label":"Made for ASP.NET Developers","href":"/docs/introduction/made-for-aspnet-developers","docId":"introduction/made-for-aspnet-developers"}]},{"type":"category","label":"Controllers & Actions","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Actions","href":"/docs/controllers/actions","docId":"controllers/actions"},{"type":"link","label":"Model State","href":"/docs/controllers/model-state","docId":"controllers/model-state"},{"type":"link","label":"Field Paths","href":"/docs/controllers/field-paths","docId":"controllers/field-paths"},{"type":"link","label":"Authorization","href":"/docs/controllers/authorization","docId":"controllers/authorization"},{"type":"link","label":"Type Extensions","href":"/docs/controllers/type-extensions","docId":"controllers/type-extensions"},{"type":"link","label":"Batch Operations","href":"/docs/controllers/batch-operations","docId":"controllers/batch-operations"}]},{"type":"category","label":"Graph Type Definitions","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Objects","href":"/docs/types/objects","docId":"types/objects"},{"type":"link","label":"Input Objects","href":"/docs/types/input-objects","docId":"types/input-objects"},{"type":"link","label":"Interfaces","href":"/docs/types/interfaces","docId":"types/interfaces"},{"type":"link","label":"Unions","href":"/docs/types/unions","docId":"types/unions"},{"type":"link","label":"Enums","href":"/docs/types/enums","docId":"types/enums"},{"type":"link","label":"Scalars","href":"/docs/types/scalars","docId":"types/scalars"},{"type":"link","label":"List & Non-Null","href":"/docs/types/list-non-null","docId":"types/list-non-null"}]},{"type":"category","label":"Advanced","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Subscriptions","href":"/docs/advanced/subscriptions","docId":"advanced/subscriptions"},{"type":"link","label":"Type Expressions","href":"/docs/advanced/type-expressions","docId":"advanced/type-expressions"},{"type":"link","label":"Directives","href":"/docs/advanced/directives","docId":"advanced/directives"},{"type":"link","label":"Custom Scalars","href":"/docs/advanced/custom-scalars","docId":"advanced/custom-scalars"},{"type":"link","label":"Action Results","href":"/docs/advanced/graph-action-results","docId":"advanced/graph-action-results"},{"type":"link","label":"Multi-Schema Support","href":"/docs/advanced/multi-schema-support","docId":"advanced/multi-schema-support"}]},{"type":"category","label":"Logging","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Structured Logging","href":"/docs/logging/structured-logging","docId":"logging/structured-logging"},{"type":"link","label":"Standard Events","href":"/docs/logging/standard-events","docId":"logging/standard-events"},{"type":"link","label":"Subscription Events","href":"/docs/logging/subscription-events","docId":"logging/subscription-events"}]},{"type":"category","label":"Query Execution","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Query Profiling","href":"/docs/execution/metrics","docId":"execution/metrics"},{"type":"link","label":"Malicious Queries","href":"/docs/execution/malicious-queries","docId":"execution/malicious-queries"}]},{"type":"category","label":"Development Concerns","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Debugging","href":"/docs/development/debugging","docId":"development/debugging"},{"type":"link","label":"Unit Testing","href":"/docs/development/unit-testing","docId":"development/unit-testing"},{"type":"link","label":"Entity Framework","href":"/docs/development/entity-framework","docId":"development/entity-framework"}]},{"type":"category","label":"Extensions","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"File Uploads & Batching","href":"/docs/server-extensions/multipart-requests","docId":"server-extensions/multipart-requests"}]},{"type":"category","label":"References","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"How it Works","href":"/docs/reference/how-it-works","docId":"reference/how-it-works"},{"type":"link","label":"Schema Configuration","href":"/docs/reference/schema-configuration","docId":"reference/schema-configuration"},{"type":"link","label":"Global Configuration","href":"/docs/reference/global-configuration","docId":"reference/global-configuration"},{"type":"link","label":"Attributes","href":"/docs/reference/attributes","docId":"reference/attributes"},{"type":"link","label":"GraphController","href":"/docs/reference/graph-controller","docId":"reference/graph-controller"},{"type":"link","label":"GraphDirective","href":"/docs/reference/graph-directive","docId":"reference/graph-directive"},{"type":"link","label":"HTTP Processor","href":"/docs/reference/http-processor","docId":"reference/http-processor"},{"type":"link","label":"Pipelines & Middleware","href":"/docs/reference/middleware","docId":"reference/middleware"},{"type":"link","label":"Query Caching","href":"/docs/reference/query-cache","docId":"reference/query-cache"},{"type":"link","label":"Demo Projects","href":"/docs/reference/demo-projects","docId":"reference/demo-projects"},{"type":"link","label":"Benchmarks","href":"/docs/reference/performance","docId":"reference/performance"},{"type":"link","label":"Vocabulary","href":"/docs/reference/vocabulary","docId":"reference/vocabulary"}]}]},"docs":{"advanced/custom-scalars":{"id":"advanced/custom-scalars","title":"Custom Scalars","description":"Scalars are the most basic, fundamental unit of content in GraphQL. It is one of two leaf types (the other being enums).","sidebar":"tutorialSidebar"},"advanced/directives":{"id":"advanced/directives","title":"Directives","description":"What is a Directive?","sidebar":"tutorialSidebar"},"advanced/graph-action-results":{"id":"advanced/graph-action-results","title":"Action Results","description":"What is an Action Result?","sidebar":"tutorialSidebar"},"advanced/multi-schema-support":{"id":"advanced/multi-schema-support","title":"Multi-Schema Support","description":"GraphQL ASP.NET supports multiple schemas on the same server out of the box. Each schema is recognized by its concrete .NET type.","sidebar":"tutorialSidebar"},"advanced/subscriptions":{"id":"advanced/subscriptions","title":"Subscriptions","description":"Initial Setup","sidebar":"tutorialSidebar"},"advanced/type-expressions":{"id":"advanced/type-expressions","title":"Type Expressions","description":"The GraphQL specification states that when a field resolves a value that doesn\'t conform to the expected type expression of the field that the value is rejected, converted to null and an error added to the response.","sidebar":"tutorialSidebar"},"controllers/actions":{"id":"controllers/actions","title":"Controllers & Actions","description":"What is an Action?","sidebar":"tutorialSidebar"},"controllers/authorization":{"id":"controllers/authorization","title":"Authorization","description":"Quick Examples","sidebar":"tutorialSidebar"},"controllers/batch-operations":{"id":"controllers/batch-operations","title":"Batch Operations","description":"Read the section on type extensions before reading this document. Batch Operations expand on type extensions and understanding how they work is critical.","sidebar":"tutorialSidebar"},"controllers/field-paths":{"id":"controllers/field-paths","title":"Field Paths","description":"What is a Field Path?","sidebar":"tutorialSidebar"},"controllers/model-state":{"id":"controllers/model-state","title":"Model State","description":"What is Model State?","sidebar":"tutorialSidebar"},"controllers/type-extensions":{"id":"controllers/type-extensions","title":"Type Extensions","description":"Working with Child Data","sidebar":"tutorialSidebar"},"development/debugging":{"id":"development/debugging","title":"Debugging Your Schema","description":"Disable Field Asynchronousity","sidebar":"tutorialSidebar"},"development/entity-framework":{"id":"development/entity-framework","title":"Using Entity Framework","description":"DbContext and Parallel Query Operations","sidebar":"tutorialSidebar"},"development/unit-testing":{"id":"development/unit-testing","title":"Unit Testing","description":".NET 6+","sidebar":"tutorialSidebar"},"execution/malicious-queries":{"id":"execution/malicious-queries","title":"Dealing with Malicious Queries","description":"When GraphQL ASP.NET parses a query it creates two values that attempt to describe the query in terms of impact and server load; Max Depth and Estimated Complexity. There also exists limiters to these values that can be set in the schema configuration such that should any query plan exceed the limits you set, the plan will be rejected and the query not fulfilled.","sidebar":"tutorialSidebar"},"execution/metrics":{"id":"execution/metrics","title":"Profiling Your Queries","description":"GraphQL ASP.NET tracks query metrics through the IQueryExecutionMetrics interface attached to each query execution context as its processed by the runtime and allows for tracing and timing of individual fields as they are started and completed.","sidebar":"tutorialSidebar"},"introduction/made-for-aspnet-developers":{"id":"introduction/made-for-aspnet-developers","title":"Made for ASP.NET Developers","description":"This library is designed by people who use ASP.NET in their day to day activities and is built for similar minded developers. When you first started digging in to GraphQL you most likely came across the plethora of articles, documents, tutorials and groups centered around JavaScript. JavaScript certainly has the highest adoption rate and with the tools provided by Apollo its no surprise. Its amazing how well those tools fit in with the existing knowledge and coding paradigms of JavaScript developers on both sides of the fence (be that front end or back end).","sidebar":"tutorialSidebar"},"introduction/what-is-graphql":{"id":"introduction/what-is-graphql","title":"What is GraphQL?","description":"GraphQL is a query language specification originally created by Meta for their own internal use. It was eventually open-sourced and moved to its own foundation, the GraphQL Foundation, and hosted by the Linux Foundation. The specification provides an alternative to traditional REST queries that we all know and love in giving the requestor more control over what data to return.","sidebar":"tutorialSidebar"},"logging/standard-events":{"id":"logging/standard-events","title":"Standard Logging Events","description":"GraphQL ASP.NET tracks many standard events. Most of these are recorded during the execution of a query. Some, such as those around field resolution, can be recorded many times in the course of a single request.","sidebar":"tutorialSidebar"},"logging/structured-logging":{"id":"logging/structured-logging","title":"Structured Logging","description":"GraphQL ASP.NET utilizes structured logging for reporting runtime events. The log messages generated aren\'t just strings but actual objects. All internal log events are raised as objects that inherit from IGraphLogEntry.","sidebar":"tutorialSidebar"},"logging/subscription-events":{"id":"logging/subscription-events","title":"Subscription Logging Events","description":"GraphQL ASP.NET tracks some special events related to the management of subscriptions. They are outlined below.","sidebar":"tutorialSidebar"},"quick/code-examples":{"id":"quick/code-examples","title":"Code Examples","description":"Below is a quick introduction to some common scenarios and the C# code to support them.","sidebar":"tutorialSidebar"},"quick/create-app":{"id":"quick/create-app","title":"Building Your First App","description":"Step by Step instructions for creating a sample application","sidebar":"tutorialSidebar"},"quick/overview":{"id":"quick/overview","title":"Overview","description":"A quick overview of how to use the library","sidebar":"tutorialSidebar"},"reference/attributes":{"id":"reference/attributes","title":"Attributes","description":"This document contains an alphabetical reference of each of the class, property and method attributes used by GraphQL ASP.NET.","sidebar":"tutorialSidebar"},"reference/demo-projects":{"id":"reference/demo-projects","title":"Demo Projects","description":"General","sidebar":"tutorialSidebar"},"reference/global-configuration":{"id":"reference/global-configuration","title":"Global Configuration","description":"Global configuration settings affect the entire server instance, they are not restricted to a single schema registration. All global settings are optional and define resonable default values. Use these to fine tune your server environment. You should change any global settings BEFORE calling .AddGraphQL().","sidebar":"tutorialSidebar"},"reference/graph-controller":{"id":"reference/graph-controller","title":"Graph Controller","description":"\u2705 See the section on Controllers & Actions for a detailed explination on how action methods work and how to declare them.","sidebar":"tutorialSidebar"},"reference/graph-directive":{"id":"reference/graph-directive","title":"Graph Directive","description":"\u2705 See the section on Directives for a detailed explination on how directive action methods work and how to declare them.","sidebar":"tutorialSidebar"},"reference/how-it-works":{"id":"reference/how-it-works","title":"How it Works","description":"This document is a high level overview how GraphQL ASP.NET ultimately generates a response to a query with some insight into core details. Its assumes a working knowledge of both ASP.NET and the GraphQL specification. If you are only interested in the \\"how\\" and not the \\"why\\", feel free to skip this.","sidebar":"tutorialSidebar"},"reference/http-processor":{"id":"reference/http-processor","title":"HTTP Processor","description":"The DefaultGraphQLHttpProcessor is mapped to a route for the target schema and accepts an HttpContext from the ASP.NET runtime. It inspects the received payload (the query text and variables) then packages an IQueryExecutionRequest and sends it to the GraphQL runtime. Once a result is generated the controller forwards that response to the response writer for serialization.","sidebar":"tutorialSidebar"},"reference/middleware":{"id":"reference/middleware","title":"Pipelines and Custom Middleware","description":"At the heart of GraphQL ASP.NET are 4 middleware pipelines; chains of components executed in a specific order to produce a result.","sidebar":"tutorialSidebar"},"reference/performance":{"id":"reference/performance","title":"Benchmarks & Performance","description":"Query Benchmarking","sidebar":"tutorialSidebar"},"reference/query-cache":{"id":"reference/query-cache","title":"Query Caching","description":"When GraphQL ASP.NET parses a query, it generates a query plan that contains all the required data needed to execute the requested operation. For most queries this process is near instantaneous but in some particularly large queries it may take an extra moment to generate a full query plan. The query cache will help alleviate this bottleneck by caching a plan for a set period of time to skip the parsing and generation phases when completing a request.","sidebar":"tutorialSidebar"},"reference/schema-configuration":{"id":"reference/schema-configuration","title":"Schema Configuration","description":"This document contains a list of various configuration settings available during schema configuration. All options are added as part of the .AddGraphQL() method used at startup.","sidebar":"tutorialSidebar"},"reference/vocabulary":{"id":"reference/vocabulary","title":"Vocabulary","description":"Fields & Resolvers","sidebar":"tutorialSidebar"},"server-extensions/multipart-requests":{"id":"server-extensions/multipart-requests","title":"Multipart Form Request Extension","description":".NET 6+","sidebar":"tutorialSidebar"},"types/enums":{"id":"types/enums","title":"Enums","description":"The ENUM graph type is represented by an enum type in .NET. The naming and exclusion rules used with object types apply in the same manner to enums.","sidebar":"tutorialSidebar"},"types/input-objects":{"id":"types/input-objects","title":"Input Objects","description":"INPUTOBJECT graph types (a.k.a. input objects) represent complex data supplied to arguments on fields or directives. Anytime you want to pass more data than a single string or a number, perhaps an Address or a new Employee record, you use an INPUTOBJECT to represent that entity in GraphQL.  When the system scans your controllers, if it comes across a class or struct used as a parameter to a method it will attempt to generate the appropriate input type definition to represent that class.","sidebar":"tutorialSidebar"},"types/interfaces":{"id":"types/interfaces","title":"Interfaces","description":"Interfaces in GraphQL work like interfaces in C#, for the most part. They provide a contract for a set of common fields amongst different objects. When it comes to declaring them, the INTERFACE graph type works exactly like object types.","sidebar":"tutorialSidebar"},"types/list-non-null":{"id":"types/list-non-null","title":"List & Non-Null","description":"In addition to the six fundamental graph types, GraphQL contains two meta graph types: LIST and NON_NULL.","sidebar":"tutorialSidebar"},"types/objects":{"id":"types/objects","title":"The Object Graph Type","description":"The OBJECT graph type is one of six fundamental types defined by GraphQL. We can think of a graph query like a tree and if scalar values, such as string and int, are the leafs then objects are the branches.","sidebar":"tutorialSidebar"},"types/scalars":{"id":"types/scalars","title":"Scalars","description":"Scalars are the most basic, fundamental unit of content in GraphQL. It is one of two leaf types (the other being enums). You can extend GraphQL with your own custom scalars when needed.","sidebar":"tutorialSidebar"},"types/unions":{"id":"types/unions","title":"Unions","description":"Unions are an aggregate graph type representing multiple, different OBJECT types with no guaranteed fields or interfaces in common; for instance, Salad or House. Because of this, unions define no fields themselves but provide a common way to query the fields of the union members when one is encountered.","sidebar":"tutorialSidebar"}}}')}}]);