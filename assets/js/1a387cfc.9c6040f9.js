"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3515],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>g});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,g=m["".concat(u,".").concat(c)]||m[c]||y[c]||l;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(8168),r=(t(6540),t(5680));const l={id:"enums",title:"Enums",sidebar_label:"Enums",sidebar_position:4},i=void 0,o={unversionedId:"types/enums",id:"types/enums",title:"Enums",description:"The ENUM graph type is represented by an enum type in .NET. The naming and exclusion rules used with object types apply in the same manner to enums.",source:"@site/docs/types/enums.md",sourceDirName:"types",slug:"/types/enums",permalink:"/docs/types/enums",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"enums",title:"Enums",sidebar_label:"Enums",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Unions",permalink:"/docs/types/unions"},next:{title:"Scalars",permalink:"/docs/types/scalars"}},u={},p=[{value:"Including an Enum in Your Schema",id:"including-an-enum-in-your-schema",level:2},{value:"Excluding an Enum Value",id:"excluding-an-enum-value",level:2},{value:"Custom Type Name",id:"custom-type-name",level:2},{value:"Custom Value Names",id:"custom-value-names",level:2},{value:"Value Name Formatting",id:"value-name-formatting",level:2}],s={toc:p};function m(e){let{components:n,...t}=e;return(0,r.yg)("wrapper",(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ENUM")," graph type is represented by an ",(0,r.yg)("inlineCode",{parentName:"p"},"enum")," type in .NET. The naming and exclusion rules used with ",(0,r.yg)("a",{parentName:"p",href:"./objects"},"object types")," apply in the same manner to enums."),(0,r.yg)("p",null,"By Default:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"An ",(0,r.yg)("inlineCode",{parentName:"li"},"ENUM")," graph type will have the same name as its ",(0,r.yg)("inlineCode",{parentName:"li"},"enum")," type in your code."),(0,r.yg)("li",{parentName:"ul"},"All declared enum values are included, including compound values.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n}\n")),(0,r.yg)("p",null,"Compound Values are represented as their own enum value option."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n    // highlight-next-line\n    Filled = Custard | Jelly\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n  // highlight-next-line\n  FILLED\n}\n")),(0,r.yg)("h2",{id:"including-an-enum-in-your-schema"},"Including an Enum in Your Schema"),(0,r.yg)("p",null,"An enum graph type is automatically created from a .NET enum if it is:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Used as a parameter to an action method"),(0,r.yg)("li",{parentName:"ul"},"Used as a return value of an action method"),(0,r.yg)("li",{parentName:"ul"},"Used as a parameter or return type of any property or method of any included class or struct.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutController.cs"',title:'"DonutController.cs"'},"public class DonutController : GraphController \n{\n  [QueryRoot]\n  // highlight-next-line\n  public int RetrieveDonutCount(DonutType donutType)\n  {\n    /* ... */\n  }\n}\n")),(0,r.yg)("p",null,"You can also explicitly add an enum at start up:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup code"',title:'"Startup','code"':!0},"services.AddGraphQL(options => \n{\n   options.AddGraphType<DonutType>();\n});\n")),(0,r.yg)("h2",{id:"excluding-an-enum-value"},"Excluding an Enum Value"),(0,r.yg)("p",null,"Use the ",(0,r.yg)("inlineCode",{parentName:"p"},"[GraphSkip]")," attribute to omit a value from the schema. A query will be rejected if it attempts to submit an omitted enum value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n\n    // highlight-next-line\n    [GraphSkip]\n    SugarCoated,\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"# Sugar Coated is not part of the enum type\nenum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n}\n")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"An excluded enum value is not just hidden, its NOT part of the schema. Any attempt to use it as a value in a query, a variable or as a result from a field resolution will cause a validation error.")),(0,r.yg)("h2",{id:"custom-type-name"},"Custom Type Name"),(0,r.yg)("p",null,"Like with other graph types, use the ",(0,r.yg)("inlineCode",{parentName:"p"},"[GraphType]")," attribute to indicate a custom name for the enum in the schema."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},'// highlight-next-line\n[GraphType("Donut_Type")]\npublic enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"// highlight-next-line\nenum Donut_Type {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n}\n")),(0,r.yg)("h2",{id:"custom-value-names"},"Custom Value Names"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"[GraphEnumValue]")," to declare a custom name for the enum value and GraphQL will automatically handle the name translation when parsing a query document. A target schema's naming format rules will be applied and enforced on the value provided."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},'public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n\n    [GraphEnumValue("Sugar_Coated")]\n    SugarCoated,\n}\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGAR_COATED\n}\n")),(0,r.yg)("h2",{id:"value-name-formatting"},"Value Name Formatting"),(0,r.yg)("p",null,"By default, enum values are rendered in all CAPITAL LETTERS. This is the standard convention for GraphQL. If, however; you'd prefer something different you can override the defaults by creating a new ",(0,r.yg)("inlineCode",{parentName:"p"},"GraphNameFormatter")," on your ",(0,r.yg)("a",{parentName:"p",href:"/docs/reference/schema-configuration#graphnamingformatter"},"schema configuration"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup Code"',title:'"Startup','Code"':!0},"services.AddGraphQL(o => {\n  // highlight-start\n  var customFormatter = new GraphNameFormatter(enumValueStrategy: GraphNameFormatStrategy.ProperCase);\n  o.DeclarationOptions.GraphNamingFormatter = customFormatter;\n  // highlight-end\n})\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Sample Formatting"',title:'"Sample','Formatting"':!0},"enum DonutType {\n  Glazed\n  Cake\n  Custard\n  Jelly\n}\n")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you need something even more exotic, inherit from ",(0,r.yg)("inlineCode",{parentName:"p"},"GraphNameFormatter")," and override the various methods as you see fit.")))}m.isMDXComponent=!0}}]);